{"version":3,"sources":["../src/index.js"],"names":["globalJsdom","defaultHtml","KEYS","html","options","global","navigator","userAgent","includes","document","destroy","url","Object","assign","jsdom","JSDOM","window","length","push","getOwnPropertyNames","filter","k","startsWith","forEach","key","console","$jsdom","cleanup"],"mappings":";;;;;kBAWwBA,W;;AARxB;;oMAHA;;;;;AAKA,IAAMC,cAAc,8EAApB;;AAEA;AACA;AACA,IAAMC,OAAO,EAAb;;AAEe,SAASF,WAAT,GAAuD;AAAA,MAAlCG,IAAkC,uEAA3BF,WAA2B;AAAA,MAAdG,OAAc,uEAAJ,EAAI;;AACpE;AACA,MAAIC,OAAOC,SAAP,IACCD,OAAOC,SAAP,CAAiBC,SADlB,IAECF,OAAOC,SAAP,CAAiBC,SAAjB,CAA2BC,QAA3B,CAAoC,SAApC,CAFD,IAGCH,OAAOI,QAHR,IAIC,OAAOJ,OAAOI,QAAP,CAAgBC,OAAvB,KAAmC,UAJxC,EAIoD;AAClD,WAAOL,OAAOI,QAAP,CAAgBC,OAAvB;AACD;;AAED;AACA,MAAI,CAACN,QAAQO,GAAb,EAAkB;AAAEC,WAAOC,MAAP,CAAcT,OAAd,EAAuB,EAAEO,KAAK,uBAAP,EAAvB;AAA0D;;AAE9E,MAAMG,QAAQ,IAAIC,YAAJ,CAAUZ,IAAV,EAAgBC,OAAhB,CAAd;AAboE,MAc5DY,MAd4D,GAcjDF,KAdiD,CAc5DE,MAd4D;AAAA,MAe5DP,QAf4D,GAe/CO,MAf+C,CAe5DP,QAf4D;;AAiBpE;AACA;AACA;;AAEA,MAAIP,KAAKe,MAAL,KAAgB,CAApB,EAAuB;AACrBf,SAAKgB,IAAL,gCAAaN,OAAOO,mBAAP,CAA2BH,MAA3B,EAAmCI,MAAnC,CAA0C,UAACC,CAAD;AAAA,aAAO,CAACA,EAAEC,UAAF,CAAa,GAAb,CAAR;AAAA,KAA1C,EAAqEF,MAArE,CAA4E,UAACC,CAAD;AAAA,aAAO,EAAEA,KAAKhB,MAAP,CAAP;AAAA,KAA5E,CAAb;AACA;AACAH,SAAKgB,IAAL,CAAU,QAAV;AACD;AACD;AACAhB,OAAKqB,OAAL,CAAa,UAACC,GAAD;AAAA,WAASnB,OAAOmB,GAAP,IAAcR,OAAOQ,GAAP,CAAvB;AAAA,GAAb;;AAEA;AACAnB,SAAOI,QAAP,GAAkBA,QAAlB;AACAJ,SAAOW,MAAP,GAAgBA,MAAhB;AACAA,SAAOS,OAAP,GAAiBpB,OAAOoB,OAAxB;;AAEA;AACApB,SAAOqB,MAAP,GAAgBZ,KAAhB;;AAEA,MAAMa,UAAU,SAAVA,OAAU;AAAA,WAAMzB,KAAKqB,OAAL,CAAa,UAACC,GAAD;AAAA,aAAS,OAAOnB,OAAOmB,GAAP,CAAhB;AAAA,KAAb,CAAN;AAAA,GAAhB;;AAEAf,WAASC,OAAT,GAAmBiB,OAAnB;;AAEA,SAAOA,OAAP;AACD","file":"index.js","sourcesContent":["/*\n * enables jsdom globally.\n */\nimport { JSDOM } from 'jsdom'\n\nconst defaultHtml = '<!doctype html><html><head><meta charset=\"utf-8\"></head><body></body></html>'\n\n// define this here so that we only ever dynamically populate KEYS once . this\n// way\nconst KEYS = []\n\nexport default function globalJsdom(html = defaultHtml, options = {}) {\n  // Idempotency\n  if (global.navigator\n    && global.navigator.userAgent\n    && global.navigator.userAgent.includes('Node.js')\n    && global.document\n    && typeof global.document.destroy === 'function') {\n    return global.document.destroy\n  }\n\n  // set a default url if we don't get one - otherwise things explode when we copy localstorage keys\n  if (!options.url) { Object.assign(options, { url: 'http://localhost:3000' }) }\n\n  const jsdom = new JSDOM(html, options)\n  const { window } = jsdom\n  const { document } = window\n\n  // generate our list of keys by enumerating document.window - this list may vary\n  // based on the jsdom version. filter out internal methods as well as anything\n  // that node already defines\n\n  if (KEYS.length === 0) {\n    KEYS.push(...Object.getOwnPropertyNames(window).filter((k) => !k.startsWith('_')).filter((k) => !(k in global)))\n    // going to add our jsdom instance, see below\n    KEYS.push('$jsdom')\n  }\n  // eslint-disable-next-line no-return-assign\n  KEYS.forEach((key) => global[key] = window[key])\n\n  // setup document / window / window.console\n  global.document = document\n  global.window = window\n  window.console = global.console\n\n  // add access to our jsdom instance\n  global.$jsdom = jsdom\n\n  const cleanup = () => KEYS.forEach((key) => delete global[key])\n\n  document.destroy = cleanup\n\n  return cleanup\n}\n"]}